{"name": "test_wait_visit_quality_case", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"dropdown dropdown-list-toggle\" id=\"message_warn\" style=\"\">...</li> is not clickable at point (1775, 53). Other element would receive the click: <div class=\"layui-m-layershade\"></div>\n  (Session info: chrome=91.0.4472.114)", "trace": "self = <test_dir.test_popup.TestPopup object at 0x00000000047CE730>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"59952314024475dd9b22a3ab7b9c4616\")>, base_url = 'http://newtest.elinkbuy.cn'\n\n    def test_wait_visit_quality_case(self, browser, base_url):\n        \"\"\"\n        模拟业务员待回访优质客户弹窗数据验证\n        1.查询业务员待回访优质客户数据\n        2.点击信息下拉框下待回访优质客户菜单\n        3.验证待回访优质客户数据\n        \"\"\"\n        self.login(browser, base_url)\n        wait_visit_quality_total = 0\n        self.user = self.get_user()\n        if self.user['roles_str'] not in [87, 97]:\n            db_conn = DB(ip='47.103.83.160', user='root', passwd='c587024e9ec3ea0a', db='ylg')\n            clients = db_conn.query(\"select code,name,client_id,clientid,staff_id from xy_client where clientid> 0  and staff_id='\" + str(self.user['staff_id']) + \"'and high_quality=1\")\n            if clients:\n                for client in clients:\n                    begin_date = datetime.date.today() - relativedelta(months=+2)\n                    status = db_conn.query(\"select visit_id from xy_visit where client_id=\" + str(\n                        client['client_id']) + \" and type='report' and visit_time>'\" + str(begin_date) + \"' limit 1\")\n                    if not status:\n                        wait_visit_quality_total += 1\n        print('待回访优质客户：' + str(wait_visit_quality_total))\n        sleep(2)\n    \n        self.page = PopupPage(browser)\n        self.close_layer()  # 关闭弹层\n>       self.page.message_button.click()  # 点击信息图标\n\ntest_dir\\test_popup.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Program Files\\Python38\\lib\\site-packages\\poium\\page_objects.py:235: in click\n    elem.click()\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000000047A8940>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...x750E343D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77989802+99]\\\\n\\\\tRtlInitializeExceptionChain [0x779897D5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"dropdown dropdown-list-toggle\" id=\"message_warn\" style=\"\">...</li> is not clickable at point (1775, 53). Other element would receive the click: <div class=\"layui-m-layershade\"></div>\nE         (Session info: chrome=91.0.4472.114)\n\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "description": "\n        模拟业务员待回访优质客户弹窗数据验证\n        1.查询业务员待回访优质客户数据\n        2.点击信息下拉框下待回访优质客户菜单\n        3.验证待回访优质客户数据\n        ", "steps": [{"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "5301c189-e913-4e2c-a8cf-6c77f4f6a0e0-attachment.png", "type": "image/png"}], "start": 1627372303552, "stop": 1627372303757}], "attachments": [{"name": "log", "source": "ed67f564-6bfc-45c3-b714-56d91212f35d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "1497e635-fec1-4c72-b94f-b84f58607d34-attachment.txt", "type": "text/plain"}], "start": 1627372290074, "stop": 1627372302928, "uuid": "57271406-41fc-4dc2-b83d-cdf8d492e2f1", "historyId": "47601cc59f6fd45d8d76749b53ace323", "testCaseId": "18a48a0d5c778963bc84667bc2834610", "fullName": "test_dir.test_popup.TestPopup#test_wait_visit_quality_case", "labels": [{"name": "parentSuite", "value": "test_dir"}, {"name": "suite", "value": "test_popup"}, {"name": "subSuite", "value": "TestPopup"}, {"name": "host", "value": "Win7-2019MNTZRK"}, {"name": "thread", "value": "12180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_dir.test_popup"}]}